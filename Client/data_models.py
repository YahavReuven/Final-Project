"""
Module used to define data classes.
"""
from dataclasses import dataclass, field
from typing import Optional
from datetime import timedelta


@dataclass
class TaskStatistics:
    """The statistics generated by a worker from a single task execution."""
    pure_run_time: timedelta
    total_execution_time: timedelta


@dataclass
class StorageTaskStatistics:
    """The statistics of a project, containing identifying information."""
    project_id: str
    task_number: int
    statistics: TaskStatistics


@dataclass
class TaskStatisticsServer:
    """The statistics of a task generated by the server."""
    task_statistics: TaskStatistics
    with_communications: timedelta


@dataclass
class ProjectStatisticsServer:
    """The statistics of a project."""
    overall_project_time: timedelta
    task_statistics: list[TaskStatisticsServer] = field(default_factory=list)


@dataclass
class ReceivedTask:
    """A task received from the server for execution."""
    project_id: str
    task_number: int
    task_size: int
    base64_serialized_class: str
    base64_serialized_iterable: str
    modules: list
    parallel_func: str
    stop_func: str
    only_if_func: str


# TODO: check if need to change to BaseModel
@dataclass
class ReturnedTask:
    """A finished task sent to the server."""
    worker_id: str
    project_id: str
    task_number: int
    statistics: dict
    results: dict
    base64_zipped_additional_results: Optional[str] = None
    stop_called: bool = False
    is_exhausted: bool = False


@dataclass
class User:
    """A user in the client side."""
    ip: str
    port: int
    device_id: str
    projects: list[ProjectStatisticsServer] = field(default_factory=list)
    tasks: list[StorageTaskStatistics] = field(default_factory=list)
